{
  "name": "templatizer",
  "version": "0.0.11",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "description": "Simple solution for compiling jade templates into vanilla JS functions for blazin' fast client-side use.",
  "dependencies": {
    "jade": "0.28.x",
    "uglify-js": "2.2.x",
    "walkdir": "",
    "underscore": "",
    "colors": "",
    "yetify": ""
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/templatizer.git"
  },
  "keywords": [
    "templates",
    "browser",
    "jade"
  ],
  "main": "templatizer.js",
  "readme": "# templatizer.js\n\nSimple solution for compiling jade templates into vanilla JS functions for blazin' fast client-side use.\n\n## What is this?\n\nClient-side templating is overly complicated, ultimately what you *actually* want is a function you can call from your JS that puts your data in a template. Why should I have to send a bunch of strings with Mustaches `{{}}` or other silly stuff for the client to parse? Ultimately, all I want is a function that I can call with some variable to render the string I want.\n\nSo, the question is, what's a sane way to get to that point? Enter [jade](http://jade-lang.com). Simple, intuitive templating, and happens to be what I use on the server anyway. So... Jade has some awesome stuff for compiling templates into functions. I just built templatizer to make it easy to turn a folder full of jade templates into a CommonJS module that exports all the template functions by whatever their file name.\n\n## Is it faster?\nFrom my tests it's 6 to 10 times faster than mustache.js with ICanHaz.\n\n## How do I use it?\n\n1. `npm install templatizer`\n1. Write all your templates as individual jade files in a folder in your project.\n1. Somewhere in your build process do this:\n    \n```js\nvar templatizer = require('templatizer');\n\n// pass in the template directory and what you want to \n// save the output file as. That's it!\ntemplatizer(__dirname + '/templates', __dirname + '/demo_output.js');\n```\n\nSo a folder like this\n\n```\n/clienttemplates\n   user.jade\n   app.jade\n   /myfolder\n     nestedTemplate.jade\n```\n\nComplies down to a JS file that looks something like this:\n\n```js\n// here's about 2k worth of utils that jade uses to DRY up the template code a bit. \n// Includes some basic shims for Object.keys, etc.\nvar jade=function(exports){ ... }\n\n// a function built from the `user.jade` file\n// that takes your data and returns a string.\nexports.user = function () {} \n\n// built from the `app.jade` file\nexports.app = function () {} // the function \n\n// folders become nested objects so \n// myfolder/nestedTemplate.jade becomes\nexports.myfolder.nestedTemplate = function () {} // the template function\n\n// etc. etc\n```\n\nThe awesome thing is... there are no external dependencies because they're just functions at this point. Crazy fast, SO MUCH WIN!!!!\n\n## Sample?\n\nCheck out the `demo_output.js` file for... err... demo output built from the `templates` directory in this project.\n\n## License\n\nMIT\n\nIf you think this is cool, you should follow me on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg)",
  "readmeFilename": "README.md",
  "_id": "templatizer@0.0.11",
  "dist": {
    "shasum": "a25d05dd56ce80ff4fb58722cbb660bccda49f3a"
  },
  "_from": "templatizer@",
  "_resolved": "https://registry.npmjs.org/templatizer/-/templatizer-0.0.11.tgz"
}
