{
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "name": "helmet",
  "description": "Security header middleware collection for express",
  "version": "0.0.9",
  "keywords": [
    "security",
    "headers",
    "express",
    "x-frame-options",
    "csp"
  ],
  "repository": {
    "url": "git://github.com/evilpacket/helmet.git"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "dependencies": {},
  "devDependencies": {},
  "main": "lib/index",
  "readme": "Express / Connect middleware that implement various security headers. [with sane defaults where applicable]\n\n## Included Middleware\n\n  - csp (Content Security Policy)\n  - HSTS (HTTP Strict Transport Security)\n  - xframe (X-FRAME-OPTIONS)\n  - iexss (X-XSS-PROTECTION for IE8+)\n  - contentTypeOptions (X-Content-Type-Options nosniff)\n  - cacheControl (Cache-Control no-store, no-cache)\n\n## Installation\n\n```\nnpm install helmet\n```\n\n## Basic Express Usage\n\n```javascript\n    var helmet = require('helmet');\n```\n\nTo use a particular middleware application wide just add it to your app configuration. Make sure it is listed before app.router.\n\n```javascript\n    app.configure(function(){\n        app.use(express.methodOverride());\n        app.use(express.bodyParser());\n        app.use(helmet.csp());\n        app.use(helmet.xframe());\n        app.use(helmet.contentTypeOptions());\n        app.use(app.router);\n    });\n```\n\n## Content Security Policy\n[Content Security Policy (W3C Draft)](https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#content-security-policy-header-field)\n<- Pretty much required reading if you want to do anything with CSP\n\n### Browser Support\nCurrently there is CSP support in Firefox and experimental support in Chrome. Both X-Content-Security-Policy and X-WebKit-CSP\nheaders are set by helmet.\n\n\nThere are two different ways to build CSP policies with helmet.\n\n### Using policy()\n\npolicy() eats a json blob (including the output of it's own toJSON() function) to create a policy. By default\nhelmet has a defaultPolicy that looks like;\n\n```\nContent-Security-Policy: default-src 'self'\n```\n\nTo override this and create a new policy you could do something like\n\n```javascript\npolicy = {\n  defaultPolicy: {\n    'default-src': [\"'self'\"],\n    'img-src': ['static.andyet.net','*.cdn.example.com'],\n  }\n}\n\nhelmet.csp.policy(policy);\n```\n\n### Using add()\n\nThe same thing could be accomplished using add() since the defaultPolicy default-src is already 'self'\n\n```javascript\nhelmet.csp.add('img-src', ['static.andyet.net', '*.cdn.example.com']);\n```\n\n### Reporting Violations\n\nCSP can report violations back to a specified URL. You can either set the report-uri using policy() or add() or\nuse the reportTo() helper function.\n\n```javascript\nhelmet.csp.reportTo('http://example.com/csp');\n```\n\n## HTTP Strict Transport Security\n[draft-ietf-websec-strict-transport-sec-04](http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-04)\n\nThis middleware adds the Strict-Transport-Security header to the response \n\n### Basic Usage\n\nTo use the default header of Strict-Transport-Security: maxAge=15768000\n\n```javascript\nhelmet.hsts();\n```\n\nTo adjust other values for maxAge and to include subdomains\n\n```javascript\nhelmet.hsts(1234567, true);  // hsts(maxAge, includeSubdomains)\n```\n\n\n## X-FRAME-OPTIONS\n\nxFrame is a lot more straight forward than CSP. It has three modes. DENY, SAMEORIGIN, ALLOW-FROM. If your app does\nnot need to be framed (and most don't) you can use the default DENY.\n\n### Browser Support\n  - IE8+\n  - Opera 10.50+\n  - Safari 4+\n  - Chrome 4.1.249.1042+\n  - Firefox 3.6.9 (or earlier with NoScript)\n\nHere is an example for both SAMEORIGIN and ALLOW-FROM\n\n```javascript\nhelmet.xframe('sameorigin');\n```\n\n```javascript\nhelmet.xframe('allow-from', 'http://example.com');\n```\n\n## X-XSS-PROTECTION\n\nThe following example sets the X-XSS-PROTECTION: 1; mode=block header\n\n```javascript\nhelmet.iexss();\n```\n\n## X-Content-Type-Options\n\nThe following example sets the X-Content-Type-Options header to it's only and default option 'nosniff'\n\n```javascript\nhelmet.contentTypeOptions();\n```\n\n## Cache-Control\n\nThe following example sets the Cache-Control header to no-store, no-cache. This is not configurable at this time.\n\n```javascript\nhelmet.cacheControl();\n```\n\n## To Be Implemented\n\n  - Warn when self, unsafe-inline or unsafe-eval are not single quoted\n  - Warn when unsafe-inline or unsafe-eval are used\n  - Caching of generated CSP headers\n  - Device to capture and parse reported CSP violations\n\n",
  "readmeFilename": "README.md",
  "_id": "helmet@0.0.9",
  "_from": "helmet@0.0.9"
}
